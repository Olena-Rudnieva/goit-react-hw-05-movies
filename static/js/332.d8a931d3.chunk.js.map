{"version":3,"file":"static/js/332.d8a931d3.chunk.js","mappings":"2KAuBA,IApBmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,0BACE,+BACGF,QADH,IACGA,OADH,EACGA,EAAQG,KAAI,SAAAC,GACX,OACE,yBACE,SAAC,KAAD,CAAMC,MAAO,CAAEC,KAAML,GAAYM,GAAE,kBAAaH,EAAMI,IAAtD,SACGJ,EAAMK,SAFFL,EAAMI,GAMlB,OAIR,C,kGCZD,EATyB,SAAC,GAA+B,IAA7BE,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvC,OACE,kBAAMA,SAAUA,EAAhB,WACE,kBAAOC,KAAK,OAAOC,KAAK,cAAcC,aAAY,OAAEJ,QAAF,IAAEA,EAAAA,EAAe,MACnE,mBAAQE,KAAK,SAAb,sBAGL,E,0BC8CD,EA/Ce,WAAO,IAAD,EACnB,GAA4BG,EAAAA,EAAAA,UAAS,IAArC,eAAOf,EAAP,KAAegB,EAAf,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMb,EAAW,UAAGY,EAAaE,IAAI,gBAApB,QAAgC,IAEjDC,EAAAA,EAAAA,YAAU,WACY,KAAhBf,IAEJgB,EAAAA,EAAAA,IAAYhB,GACTiB,MAAK,SAAAC,GACJ,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,qBACjC,IACAN,MAAK,SAAAO,GACJlB,EAAUkB,EAAKC,QAChB,IACAC,OAAM,SAAAjB,GAAK,OAAIC,EAASD,EAAb,IACXkB,SAAQ,kBAAMnB,GAAW,EAAjB,GACZ,GAAE,CAACR,IAcJ,OACE,gCACGS,IAAS,8CACTF,IAAW,yCACZ,SAAC,EAAD,CAAkBP,YAAaA,EAAaC,SAhB3B,SAAA2B,GACnBA,EAAEC,iBACF,IAAMC,EAAcF,EAAEG,cAAcC,SAASF,YAAYG,MACzDpB,EAAgB,CACdqB,MAAOJ,IAETtB,GAAW,GACXE,EAAS,MACWkB,EAAEG,cACVI,OACb,KAOG,SAACC,EAAA,EAAD,CAAY9C,OAAQA,MAGzB,C,sJCnDD,IAAM+C,EAAW,+BACXC,EACJ,sNAEWC,EAAkB,WAC7B,OAAOC,MAAM,GAAD,OAAIH,EAAJ,uBAAmC,CAC7CI,QAAS,CACPC,cAAc,UAAD,OAAYJ,KAG9B,EAEYtB,EAAc,SAAAkB,GACzB,OAAOM,MAAM,GAAD,OAAIH,EAAJ,+BAAmCH,GAAS,CACtDO,QAAS,CAAEC,cAAc,UAAD,OAAYJ,KAEvC,EAEYK,EAAa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3B,OAAOJ,MAAM,GAAD,OAAIH,EAAJ,kBAAsBO,GAAW,CAC3CH,QAAS,CACPC,cAAc,UAAD,OAAYJ,KAG9B,EAEYO,EAAY,SAAC,GAAiB,IAAfD,EAAc,EAAdA,QAC1B,OAAOJ,MAAM,GAAD,OAAIH,EAAJ,kBAAsBO,EAAtB,YAAyC,CACnDH,QAAS,CACPC,cAAc,UAAD,OAAYJ,KAG9B,EAEYQ,EAAe,SAAC,GAAiB,IAAfF,EAAc,EAAdA,QAC7B,OAAOJ,MAAM,GAAD,OAAIH,EAAJ,kBAAsBO,EAAtB,YAAyC,CACnDH,QAAS,CACPC,cAAc,UAAD,OAAYJ,KAG9B,C","sources":["components/MoviesList/MoviesList.jsx","components/MoviesSearchForm/MoviesSearchForm.jsx","pages/Movies.js","services/api-service.js"],"sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <div>\n      <ul>\n        {movies?.map(movie => {\n          return (\n            <li key={movie.id}>\n              <Link state={{ from: location }} to={`/movies/${movie.id}`}>\n                {movie.title}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default MoviesList;\n","const MoviesSearchForm = ({ queryString, onSubmit }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"searchValue\" defaultValue={queryString ?? ''} />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default MoviesSearchForm;\n","import MoviesList from 'components/MoviesList/MoviesList';\nimport MoviesSearchForm from 'components/MoviesSearchForm/MoviesSearchForm';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMovies } from 'services/api-service';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryString = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (queryString === '') return;\n\n    fetchMovies(queryString)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        return Promise.reject(new Error('Please try again!'));\n      })\n      .then(data => {\n        setMovies(data.results);\n      })\n      .catch(error => setError(error))\n      .finally(() => setLoading(false));\n  }, [queryString]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const searchValue = e.currentTarget.elements.searchValue.value;\n    setSearchParams({\n      query: searchValue,\n    });\n    setLoading(true);\n    setError(null);\n    const searchField = e.currentTarget;\n    searchField.reset();\n  };\n\n  return (\n    <>\n      {error && <h1>Please try again!</h1>}\n      {loading && <div>Loading...</div>}\n      <MoviesSearchForm queryString={queryString} onSubmit={handleSubmit} />\n      <MoviesList movies={movies} />\n    </>\n  );\n};\n\nexport default Movies;\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxYTEyYjE5ZmQ1MThlNDEzN2Q4YTJiNzFlNWQ2YWQ3NyIsInN1YiI6IjY0ZDIyMjU3OTQ1ZDM2MDBmZmNmMTZiOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.ohjb2uQT05X0_S3QE3fhncaiF7rS-iXqY88hmGKTnh0';\n\nexport const fetchHomeMovies = () => {\n  return fetch(`${BASE_URL}/trending/movie/day`, {\n    headers: {\n      Authorization: `Bearer ${API_KEY}`,\n    },\n  });\n};\n\nexport const fetchMovies = query => {\n  return fetch(`${BASE_URL}/search/movie?query=${query}`, {\n    headers: { Authorization: `Bearer ${API_KEY}` },\n  });\n};\n\nexport const fetchMovie = ({ movieId }) => {\n  return fetch(`${BASE_URL}/movie/${movieId}`, {\n    headers: {\n      Authorization: `Bearer ${API_KEY}`,\n    },\n  });\n};\n\nexport const fetchCast = ({ movieId }) => {\n  return fetch(`${BASE_URL}/movie/${movieId}/credits`, {\n    headers: {\n      Authorization: `Bearer ${API_KEY}`,\n    },\n  });\n};\n\nexport const fetchReviews = ({ movieId }) => {\n  return fetch(`${BASE_URL}/movie/${movieId}/reviews`, {\n    headers: {\n      Authorization: `Bearer ${API_KEY}`,\n    },\n  });\n};\n"],"names":["movies","location","useLocation","map","movie","state","from","to","id","title","queryString","onSubmit","type","name","defaultValue","useState","setMovies","loading","setLoading","error","setError","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchMovies","then","response","ok","json","Promise","reject","Error","data","results","catch","finally","e","preventDefault","searchValue","currentTarget","elements","value","query","reset","MoviesList","BASE_URL","API_KEY","fetchHomeMovies","fetch","headers","Authorization","fetchMovie","movieId","fetchCast","fetchReviews"],"sourceRoot":""}